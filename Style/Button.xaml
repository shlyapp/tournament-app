<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="NavigationButtonStyle" TargetType="Button">
        <Setter Property="Margin" Value="0 14 0 0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="32"/>
        <Setter Property="Height" Value="80"/>
        <Setter Property="Width" Value="200"/>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="Button">
        <Setter Property="Padding" Value="10 20"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="24"/>
    </Style>

    <Style TargetType="DataGrid">
        <!-- Make the border and grid lines a little less imposing -->
        <Setter Property="BorderBrush" Value="#DDDDDD" />
        <Setter Property="HorizontalGridLinesBrush" Value="#DDDDDD" />
        <Setter Property="VerticalGridLinesBrush" Value="#DDDDDD" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>


        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <!-- Highlight a grid row as the mouse passes over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="LightCyan" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                   
                    <Style.Triggers>
                        <!-- Highlight selected rows -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#ff66ccff" />
                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="#ff66ccff" />
                            <Setter Property="BorderBrush" Value="Black" />
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                    </Style.Triggers>
                    <!-- Add some padding around the contents of a cell -->
                    <Setter Property="Padding" Value="4,3,4,3" />
                    <Setter Property="FontSize" Value="30"/>
                    <Setter Property="FontWeight" Value="Light"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="DataGridCell">
                                <Border Padding="{TemplateBinding Padding}" 
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}">
                                    <ContentPresenter />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style TargetType="Control">
                                <Setter Property="BorderBrush" Value="Transparent" />
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="PrimaryBlueColor" Color="#304FFE"/>
    <SolidColorBrush x:Key="PrimaryTextColor" Color="#FFFFFF"/>

    <SolidColorBrush x:Key="ButtonMouseOverColor" Color="#0026CA"/>

    <SolidColorBrush x:Key="ButtonProssedColor" Color="#7A7CFF"/>

    <SolidColorBrush x:Key="ButtonBorderBrushColor" Color="#0026CA"/>

    <SolidColorBrush x:Key="PrimaryDarkTextColor" Color="#0026CA"/>

    <!--SecounderyButtonStyle-->
    <Style x:Key="SecounderyButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <!--<Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryDarkTextColor}"/>-->
        <Setter Property="FontWeight" Value="ExtraBold"/>
        <Setter Property="Padding" Value="11 5.2"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="MaxHeight" Value="40"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="btnBorder" CornerRadius="5"
                                Background="{TemplateBinding Background}"
                                Width="{TemplateBinding Width}"
                                MaxHeight="{TemplateBinding MaxHeight}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True"
                                Padding="{TemplateBinding Padding}" Margin="0,0,0,-2">
                        <ContentPresenter x:Name="ContentPresenter" Focusable="False"
                                             HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                             VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                             Margin="{TemplateBinding Padding}"
                                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                             RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                        Value="{DynamicResource ButtonMouseOverColor}"/>
                            <Setter TargetName="btnBorder" Property="BorderBrush" 
                                        Value="{DynamicResource PrimaryBlueColor}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                        Value="{DynamicResource ButtonProssedColor}"/>
                            <Setter TargetName="btnBorder" Property="BorderBrush" 
                                        Value="{DynamicResource PrimaryBlueColor}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!--End-->

</ResourceDictionary>